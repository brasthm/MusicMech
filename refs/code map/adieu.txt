arena_.addRect(0, 0, ARENA_WIDTH, ARENA_HEIGHT);

    // INTRO

    song_.addCheckpoint(0, 0);

    mechanicList_.emplace_back(new ActivateTotem(0, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), true));
    mechanicList_.emplace_back(new MoveEntity(0, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, {200, 200}), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(1, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), true));
    mechanicList_.emplace_back(new MoveEntity(1, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 200 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(2, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), true));
    mechanicList_.emplace_back(new MoveEntity(2, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 200 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(3, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), true));
    mechanicList_.emplace_back(new MoveEntity(3, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 200 }), 1000, true));


    mechanicList_.emplace_back(new MoveEntity(4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 400 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(5, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 400 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(6, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 400 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(7, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 400 }), 400, false));

    mechanicList_.emplace_back(new MoveEntity(8, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 600 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(9, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 600 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(10, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 600 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(11, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 600 }), 400, false));


    mechanicList_.emplace_back(new MoveEntity(12, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 800 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(13, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 800 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(14, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 800 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(15, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 800 }), 400, false));

    mechanicList_.emplace_back(new Tether(32, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 200, 16, true, true));
    mechanicList_.emplace_back(new Tether(32, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 200, 12, true, true));
    mechanicList_.emplace_back(new Tether(32, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 200, 8, true, true));
    mechanicList_.emplace_back(new Tether(32, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 200, 4, true, true));



    // Couplet 1

    song_.addCheckpoint(14, 31);

    mechanicList_.emplace_back(new ActivateTotem(31, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), true));
    mechanicList_.emplace_back(new MoveEntity(31, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 800 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(32, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), true));
    mechanicList_.emplace_back(new MoveEntity(32, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 800 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(32, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), true));
    mechanicList_.emplace_back(new MoveEntity(32, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 800 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(32, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), true));
    mechanicList_.emplace_back(new MoveEntity(32, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 800 }), 1000, true));


    for (int ii = 0; ii < 4; ii++) {
        float i = static_cast<float>(ii);
        mechanicList_.emplace_back(new Spread(32 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(33 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(34 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(35 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

        if (i != 3) {
            mechanicList_.emplace_back(new MoveEntity(32 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 600 - i * 200 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(33 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 600 - i * 200 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(34 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 600 - i * 200 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(35 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 600 - i * 200 }), 400, false));
        }

    }

    for (int ii = 0; ii < 4; ii++) {
        float i = static_cast<float>(ii);
        mechanicList_.emplace_back(new Spread(48 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(49 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(50 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(51 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

        if (i == 0) {
            mechanicList_.emplace_back(new MoveEntity(48 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 400 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(49 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 400 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(50 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 400 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(51 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 400 }), 400, false));
        }
        if (i == 1) {
            mechanicList_.emplace_back(new MoveEntity(48 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 600 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(49 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 200, 400 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(50 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 200 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(51 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 600 }), 400, false));
        }
        if (i == 2) {
            mechanicList_.emplace_back(new MoveEntity(48 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 800 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(49 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 200, 200 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(50 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 800, 200 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(51 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 800 }), 400, false));
        }

    }

    // Couplet 2 

    song_.addCheckpoint(30, 64);

    mechanicList_.emplace_back(new ActivateTotem(64, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), true));
    mechanicList_.emplace_back(new MoveEntity(64, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 800 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(64, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), true));
    mechanicList_.emplace_back(new MoveEntity(64, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 200, 200 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(64, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), true));
    mechanicList_.emplace_back(new MoveEntity(64, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 800, 200 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(64, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), true));
    mechanicList_.emplace_back(new MoveEntity(64, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 800 }), 1000, true));


    mechanicList_.emplace_back(new Tether(68, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(68, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(68, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(68, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 100, 4, true, false));

    mechanicList_.emplace_back(new Tether(72, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(72, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(72, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(72, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 4, true, false));

    mechanicList_.emplace_back(new Tether(76, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(76, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(76, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(76, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 100, 4, true, false));

    mechanicList_.emplace_back(new Tether(80, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(80, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(80, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(80, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 4, true, false));



    // Refrain

    song_.addCheckpoint(39, 79);

    mechanicList_.emplace_back(new ActivateTotem(79, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), true));
    mechanicList_.emplace_back(new MoveEntity(79, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 800 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(79, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), true));
    mechanicList_.emplace_back(new MoveEntity(79, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 200, 200 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(79, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), true));
    mechanicList_.emplace_back(new MoveEntity(79, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 800, 200 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(79, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), true));
    mechanicList_.emplace_back(new MoveEntity(79, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 800 }), 1000, true));

    for (int ii = 0; ii < 4; ii++) {
        float i = static_cast<float>(ii);
        mechanicList_.emplace_back(new Spread(80 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(81 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(82 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(83 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

        if (ii < 2) {
            mechanicList_.emplace_back(new MoveEntity(80 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (i + 1) - 5 * PI / 4),  500 + 424 * std::sin(PI / 8 * (i + 1) - 5 * PI / 4) }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(81 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (i + 1) - 3 * PI / 4),  500 + 424 * std::sin(PI / 8 * (i + 1) - 3 * PI / 4) }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(82 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (i + 1) - 1 * PI / 4),  500 + 424 * std::sin(PI / 8 * (i + 1) - 1 * PI / 4) }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(83 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (i + 1) - 7 * PI / 4),  500 + 424 * std::sin(PI / 8 * (i + 1) - 7 * PI / 4) }), 400, false));
        }
        else {
            mechanicList_.emplace_back(new MoveEntity(80 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (i - 1) - 5 * PI / 4),  500 + 424 * std::sin(PI / 8 * (i - 1) - 5 * PI / 4) }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(81 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (i - 1) - 3 * PI / 4),  500 + 424 * std::sin(PI / 8 * (i - 1) - 3 * PI / 4) }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(82 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (i - 1) - 1 * PI / 4),  500 + 424 * std::sin(PI / 8 * (i - 1) - 1 * PI / 4) }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(83 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (i - 1) - 7 * PI / 4),  500 + 424 * std::sin(PI / 8 * (i - 1) - 7 * PI / 4) }), 400, false));
        }

    }

    for (int ii = 0; ii < 4; ii++) {
        float i = static_cast<float>(ii);
        mechanicList_.emplace_back(new Spread(96 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(97 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(98 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(99 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

        if (ii < 2) {
            mechanicList_.emplace_back(new MoveEntity(96 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (2 - i - 1) - 5 * PI / 4),  500 + 424 * std::sin(PI / 8 * (2 - i - 1) - 5 * PI / 4) }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(97 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (2 - i - 1) - 3 * PI / 4),  500 + 424 * std::sin(PI / 8 * (2 - i - 1) - 3 * PI / 4) }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(98 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (2 - i - 1) - 1 * PI / 4),  500 + 424 * std::sin(PI / 8 * (2 - i - 1) - 1 * PI / 4) }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(99 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (2 - i - 1) - 7 * PI / 4),  500 + 424 * std::sin(PI / 8 * (2 - i - 1) - 7 * PI / 4) }), 400, false));
        }
        else {
            mechanicList_.emplace_back(new MoveEntity(96 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (2 - i + 1) - 5 * PI / 4),  500 + 424 * std::sin(PI / 8 * (2 - i + 1) - 5 * PI / 4) }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(97 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (2 - i + 1) - 3 * PI / 4),  500 + 424 * std::sin(PI / 8 * (2 - i + 1) - 3 * PI / 4) }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(98 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (2 - i + 1) - 1 * PI / 4),  500 + 424 * std::sin(PI / 8 * (2 - i + 1) - 1 * PI / 4) }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(99 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 500 + 424 * std::cos(PI / 8 * (2 - i + 1) - 7 * PI / 4),  500 + 424 * std::sin(PI / 8 * (2 - i + 1) - 7 * PI / 4) }), 400, false));
        }

    }

    // Couplet 1

    song_.addCheckpoint(60, 112);

    mechanicList_.emplace_back(new ActivateTotem(112, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), false));
    mechanicList_.emplace_back(new ActivateTotem(113, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), false));
    mechanicList_.emplace_back(new ActivateTotem(114, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), false));
    mechanicList_.emplace_back(new ActivateTotem(115, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), false));


    mechanicList_.emplace_back(new ActivateTotem(116, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), true));
    mechanicList_.emplace_back(new ActivateTotem(117, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), true));
    mechanicList_.emplace_back(new ActivateTotem(118, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), true));
    mechanicList_.emplace_back(new ActivateTotem(119, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), true));

    mechanicList_.emplace_back(new MoveEntity(116, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 200 }), 1000, true));
    mechanicList_.emplace_back(new MoveEntity(116, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 200 }), 1000, true));
    mechanicList_.emplace_back(new MoveEntity(116, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 200 }), 1000, true));
    mechanicList_.emplace_back(new MoveEntity(116, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 200 }), 1000, true));

    for (int ii = 0; ii < 4; ii++) {
        float i = static_cast<float>(ii);
        if (ii == 0) {
            mechanicList_.emplace_back(new Spread(120 + i * 2, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
            mechanicList_.emplace_back(new Spread(121 + i * 2, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
            mechanicList_.emplace_back(new Spread(120 + i * 2, 100, 1, 2, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
            mechanicList_.emplace_back(new Spread(121 + i * 2, 100, 1, 2, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));
        }
        else {
            mechanicList_.emplace_back(new Spread(120 + i * 2, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
            mechanicList_.emplace_back(new Spread(121 + i * 2, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
            mechanicList_.emplace_back(new Spread(120 + i * 2, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
            mechanicList_.emplace_back(new Spread(121 + i * 2, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));
        }
        

        if (i != 3) {
            mechanicList_.emplace_back(new MoveEntity(120 + i * 2, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 400 + i * 200 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(121 + i * 2, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 400 + i * 200 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(120 + i * 2, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 400 + i * 200 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(121 + i * 2, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 400 + i * 200 }), 400, false));
        }

    }

    for (int ii = 0; ii < 4; ii++) {
        float i = static_cast<float>(ii);
        mechanicList_.emplace_back(new Spread(129 + i * 2, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(128 + i * 2, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(129 + i * 2, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(128 + i * 2, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

        if (i != 3) {
            mechanicList_.emplace_back(new MoveEntity(129 + i * 2, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 600 - i * 200 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(128 + i * 2, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 600 - i * 200 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(129 + i * 2, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 600 - i * 200 }), 400, false));
            mechanicList_.emplace_back(new MoveEntity(128 + i * 2, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 600 - i * 200 }), 400, false));
        }

    }

    mechanicList_.emplace_back(new Spread(136, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(137, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(136, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(137, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

    mechanicList_.emplace_back(new MoveEntity(136, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 400 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(137, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 400 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(136, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 400 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(137, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 400 }), 400, false));
       

    mechanicList_.emplace_back(new Spread(139, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(138, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(139, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(138, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

    mechanicList_.emplace_back(new MoveEntity(139, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 600 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(138, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 600 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(139, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 600 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(138, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 600 }), 400, false));

        
    mechanicList_.emplace_back(new Spread(140, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(141, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(140, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(141, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

    mechanicList_.emplace_back(new MoveEntity(140, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 800 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(141, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 800 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(140, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 800 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(141, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 800 }), 400, false));

    mechanicList_.emplace_back(new Spread(142, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(143, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(142, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(143, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));





    mechanicList_.emplace_back(new Spread(144, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(145, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(145, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(144, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

    mechanicList_.emplace_back(new MoveEntity(144, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 600 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(145, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 600 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(145, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 600 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(144, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 600 }), 400, false));


    mechanicList_.emplace_back(new Spread(146, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(147, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(147, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(146, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

    mechanicList_.emplace_back(new MoveEntity(146, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 400 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(147, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 400 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(147, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 400 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(146, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 400 }), 400, false));


    mechanicList_.emplace_back(new Spread(148, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(149, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(149, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(148, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

    mechanicList_.emplace_back(new MoveEntity(148, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 301 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(149, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 154 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(149, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 154 }), 400, false));
    mechanicList_.emplace_back(new MoveEntity(148, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 301 }), 400, false));

    mechanicList_.emplace_back(new Spread(148, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(149, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(149, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(148, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

    mechanicList_.emplace_back(new Spread(150, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(151, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(151, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(150, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

    // Couplet 2

    song_.addCheckpoint(76, 152);


    mechanicList_.emplace_back(new ActivateTotem(152, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), true));
    mechanicList_.emplace_back(new MoveEntity(152, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 301 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(152, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), true));
    mechanicList_.emplace_back(new MoveEntity(152, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 154 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(152, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), true));
    mechanicList_.emplace_back(new MoveEntity(152, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 154 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(152, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), true));
    mechanicList_.emplace_back(new MoveEntity(152, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 301 }), 1000, true));


    mechanicList_.emplace_back(new Tether(156, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(156, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(156, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(156, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 4, true, false));

    mechanicList_.emplace_back(new Tether(160, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(160, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(160, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(160, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 100, 4, true, false));

    mechanicList_.emplace_back(new Tether(164, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(164, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(164, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(164, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 100, 4, true, false));

    mechanicList_.emplace_back(new Tether(168, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(168, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(168, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(168, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 4, true, false));


    // Refrain

    song_.addCheckpoint(85, 167);

    mechanicList_.emplace_back(new ActivateTotem(167, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), true));
    mechanicList_.emplace_back(new MoveEntity(167, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 301 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(168, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), true));
    mechanicList_.emplace_back(new MoveEntity(168, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 154 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(168, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), true));
    mechanicList_.emplace_back(new MoveEntity(168, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 154 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(168, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), true));
    mechanicList_.emplace_back(new MoveEntity(168, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 301 }), 1000, true));


    for (int ii = 0; ii < 8; ii++) {
        float i = static_cast<float>(ii);
        mechanicList_.emplace_back(new Spread(168 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(169 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(170 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(171 + i * 4, 100, 1, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3, TARGET_FOLLOW)));

        if (ii != 7) {
            if (ii % 2 == 0) {
                mechanicList_.emplace_back(new MoveEntity(168 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 800, 698}), 400, false));
                mechanicList_.emplace_back(new MoveEntity(169 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 600, 846}), 400, false));
                mechanicList_.emplace_back(new MoveEntity(170 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 400, 846}), 400, false));
                mechanicList_.emplace_back(new MoveEntity(171 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 200, 698}), 400, false));
            }
            else {
                mechanicList_.emplace_back(new MoveEntity(168 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 301 }), 400, false));
                mechanicList_.emplace_back(new MoveEntity(169 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 400, 154 }), 400, false));
                mechanicList_.emplace_back(new MoveEntity(170 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 600, 154 }), 400, false));
                mechanicList_.emplace_back(new MoveEntity(171 + i * 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 800, 301 }), 400, false));
            }
        }
    }

    // Break 2

    song_.addCheckpoint(103, 200);

    mechanicList_.emplace_back(new ActivateTotem(200, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), true));
    mechanicList_.emplace_back(new MoveEntity(200, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 800, 698 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(200, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), true));
    mechanicList_.emplace_back(new MoveEntity(200, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 600, 846 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(200, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), true));
    mechanicList_.emplace_back(new MoveEntity(200, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 400, 846 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(200, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), true));
    mechanicList_.emplace_back(new MoveEntity(200, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 200, 698 }), 1000, true));

    mechanicList_.emplace_back(new MoveEntity(208, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 500, 500 }), 200, false));
    mechanicList_.emplace_back(new MoveEntity(208, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 500, 500 }), 200, false));
    mechanicList_.emplace_back(new MoveEntity(216, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 500, 500 }), 200, false));
    mechanicList_.emplace_back(new MoveEntity(224, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 500, 500 }), 100, false));

    // Yeah Oh-ho

    for (int ii = 0; ii < 4; ii++) {
        float i = static_cast<float>(ii);

        mechanicList_.emplace_back(new Spread(232 + 4*i, 250, 4, 4, Target(TARGET_POS, { 500, 500 })));

        mechanicList_.emplace_back(new Tether(234 + 4*i, Target(TARGET_POS, {500, 500}), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 250, 4, false, false));
        mechanicList_.emplace_back(new Tether(234 + 4*i, Target(TARGET_POS, {500, 500}), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 250, 4, false, false));
        mechanicList_.emplace_back(new Tether(234 + 4*i, Target(TARGET_POS, {500, 500}), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 250, 4, false, false));
        mechanicList_.emplace_back(new Tether(234 + 4*i, Target(TARGET_POS, {500, 500}), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 250, 4, false, false));

    }


    mechanicList_.emplace_back(new ActivateTotem(248, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), false));
    mechanicList_.emplace_back(new ActivateTotem(248, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), false));
    mechanicList_.emplace_back(new ActivateTotem(248, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), false));
    mechanicList_.emplace_back(new ActivateTotem(248, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), false));
    

    for (int ii = 0; ii < 4; ii++) {
        float i = static_cast<float>(ii);

        mechanicList_.emplace_back(new Spread(248 + 4 * i, 250, 4, 4, Target(TARGET_POS, { 500, 500 })));

        mechanicList_.emplace_back(new Tether(250 + 4 * i, Target(TARGET_POS, { 500, 500 }), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 250, 4, false, false));
        mechanicList_.emplace_back(new Tether(250 + 4 * i, Target(TARGET_POS, { 500, 500 }), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 250, 4, false, false));
        mechanicList_.emplace_back(new Tether(250 + 4 * i, Target(TARGET_POS, { 500, 500 }), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 250, 4, false, false));
        mechanicList_.emplace_back(new Tether(250 + 4 * i, Target(TARGET_POS, { 500, 500 }), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 250, 4, false, false));

        mechanicList_.emplace_back(new Spread(250 + 4 * i, 150, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(250 + 4 * i, 150, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(250 + 4 * i, 150, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 2, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(250 + 4 * i, 150, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 3, TARGET_FOLLOW)));
    }


    // Couplet 2

    song_.addCheckpoint(135, 264);


    mechanicList_.emplace_back(new ActivateTotem(264, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), true));
    mechanicList_.emplace_back(new MoveEntity(264, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 200 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(264, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), true));
    mechanicList_.emplace_back(new MoveEntity(264, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 800, 200 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(264, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), true));
    mechanicList_.emplace_back(new MoveEntity(264, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 500, 500 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(264, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), true));
    mechanicList_.emplace_back(new MoveEntity(264, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 500, 900 }), 1000, true));


    mechanicList_.emplace_back(new Tether(268, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(268, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(268, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(268, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 4, true, false));

    mechanicList_.emplace_back(new Tether(272, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(272, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(272, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(272, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 100, 4, true, false));

    mechanicList_.emplace_back(new Tether(276, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(276, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(276, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(276, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 4, true, false));

    mechanicList_.emplace_back(new Tether(280, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(280, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(280, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 4, true, false));
    mechanicList_.emplace_back(new Tether(280, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 100, 4, true, false));


    // Final

    song_.addCheckpoint(144, 280);

    mechanicList_.emplace_back(new ActivateTotem(280, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), true));
    mechanicList_.emplace_back(new MoveEntity(280, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS, { 200, 200 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(280, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), true));
    mechanicList_.emplace_back(new MoveEntity(280, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_POS, { 800, 200 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(280, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), true));
    mechanicList_.emplace_back(new MoveEntity(280, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), Target(TARGET_POS, { 500, 500 }), 1000, true));
    mechanicList_.emplace_back(new ActivateTotem(280, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), true));
    mechanicList_.emplace_back(new MoveEntity(280, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), Target(TARGET_POS, { 500, 900 }), 1000, true));


    mechanicList_.emplace_back(new ActivateTotem(284, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), false));
    mechanicList_.emplace_back(new ActivateTotem(288, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), false));
    mechanicList_.emplace_back(new ActivateTotem(292, Target(TARGET_ENTITY, TARGET_TOTEMS, 2), false));
    mechanicList_.emplace_back(new ActivateTotem(284, Target(TARGET_ENTITY, TARGET_TOTEMS, 3), false));


    for (int ii = 0; ii < 4; ii++) {
        float i = static_cast<float>(ii);

        mechanicList_.emplace_back(new Spread(296 + i * 4, 100, 1, 4, Target(TARGET_POS, { 500 + 400 * std::cos(PI / 6 * (i + 4) - PI),  500 + 400 * std::sin(PI / 6 * (i + 4) - PI) })));
        mechanicList_.emplace_back(new Spread(297 + i * 4, 100, 1, 4, Target(TARGET_POS, { 500 + 400 * std::cos(PI / 6 * (i + 3) - PI),  500 + 400 * std::sin(PI / 6 * (i + 3) - PI) })));
        mechanicList_.emplace_back(new Spread(298 + i * 4, 100, 1, 4, Target(TARGET_POS, { 500 + 400 * std::cos(PI / 6 * (i + 2) - PI),  500 + 400 * std::sin(PI / 6 * (i + 2) - PI) })));
        mechanicList_.emplace_back(new Spread(299 + i * 4, 100, 1, 4, Target(TARGET_POS, { 500 + 400 * std::cos(PI / 6 * (i + 1) - PI),  500 + 400 * std::sin(PI / 6 * (i + 1) - PI) })));

    }

    for (int ii = 0; ii < 8; ii++) {
        float i = static_cast<float>(ii);

        mechanicList_.emplace_back(new Spread(312 + i * 4, 100, 1, 4, Target(TARGET_POS, { 500 + 400 * std::cos(PI / 6 * (i + 16 + 4) - PI),  500 + 400 * std::sin(PI / 6 * (i + 16 + 4) - PI) })));
        mechanicList_.emplace_back(new Spread(313 + i * 4, 100, 1, 4, Target(TARGET_POS, { 500 + 400 * std::cos(PI / 6 * (i + 16 + 3) - PI),  500 + 400 * std::sin(PI / 6 * (i + 16 + 3) - PI) })));
        mechanicList_.emplace_back(new Spread(314 + i * 4, 100, 1, 4, Target(TARGET_POS, { 500 + 400 * std::cos(PI / 6 * (i + 16 + 2) - PI),  500 + 400 * std::sin(PI / 6 * (i + 16 + 2) - PI) })));
        mechanicList_.emplace_back(new Spread(315 + i * 4, 100, 1, 4, Target(TARGET_POS, { 500 + 400 * std::cos(PI / 6 * (i + 16 + 1) - PI),  500 + 400 * std::sin(PI / 6 * (i + 16 + 1) - PI) })));
    }

    mechanicList_.emplace_back(new Spread(312, 400, 0, 4, Target(TARGET_POS, { 500, 500 })));
    mechanicList_.emplace_back(new Spread(313, 400, 0, 0, Target(TARGET_POS, { 500, 500 })));
    mechanicList_.emplace_back(new Spread(314, 400, 0, 0, Target(TARGET_POS, { 500, 500 })));
    mechanicList_.emplace_back(new Spread(315, 400, 0, 0, Target(TARGET_POS, { 500, 500 })));

    mechanicList_.emplace_back(new Donut(320, 400, 1000, 0, 4, Target(TARGET_POS, { 500, 500 })));
    mechanicList_.emplace_back(new Donut(321, 400, 1000, 0, 0, Target(TARGET_POS, { 500, 500 })));
    mechanicList_.emplace_back(new Donut(322, 400, 1000, 0, 0, Target(TARGET_POS, { 500, 500 })));
    mechanicList_.emplace_back(new Donut(323, 400, 1000, 0, 0, Target(TARGET_POS, { 500, 500 })));

    mechanicList_.emplace_back(new Spread(328, 400, 0, 4, Target(TARGET_POS, { 500, 500 })));
    mechanicList_.emplace_back(new Spread(329, 400, 0, 0, Target(TARGET_POS, { 500, 500 })));
    mechanicList_.emplace_back(new Spread(330, 400, 0, 0, Target(TARGET_POS, { 500, 500 })));
    mechanicList_.emplace_back(new Spread(331, 400, 0, 0, Target(TARGET_POS, { 500, 500 })));


    mechanicList_.emplace_back(new Donut(336, 400, 1000, 0, 4, Target(TARGET_POS, { 500, 500 })));
    mechanicList_.emplace_back(new Donut(337, 400, 1000, 0, 0, Target(TARGET_POS, { 500, 500 })));
    mechanicList_.emplace_back(new Donut(338, 400, 1000, 0, 0, Target(TARGET_POS, { 500, 500 })));
    mechanicList_.emplace_back(new Donut(339, 400, 1000, 0, 0, Target(TARGET_POS, { 500, 500 })));