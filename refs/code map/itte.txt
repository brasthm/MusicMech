    // Intro

    song_.addCheckpoint(0, 0);

    for(int n = 0; n < 4; n++) {
        for(int ii = 0; ii < 4; ii++) {
            float i = static_cast<float>(ii);
            mechanicList_.emplace_back(new Cone(8 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * 2 * i), 500 + 300 * std::sin(PI/4 * 2 * i)})));
            mechanicList_.emplace_back(new Cone(8 + 8 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * (2 * i + 1)), 500 + 300 * std::sin(PI/4 * (2 * i + 1))})));

        }
    }

    // Couplet 1

    song_.addCheckpoint(19, 71.9);


    for(int n = 0; n < 4; n++) {
        mechanicList_.emplace_back(new Tether(72 + 16*n, Target(TARGET_ENTITY, TARGET_PLAYERS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 8, true, true));
        mechanicList_.emplace_back(new Tether(72 + 16*n, Target(TARGET_ENTITY, TARGET_PLAYERS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 8, true, true));

        mechanicList_.emplace_back(new Tether(72+ 8 + 16*n, Target(TARGET_ENTITY, TARGET_PLAYERS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 400, 8, false, true));
        mechanicList_.emplace_back(new Tether(72+ 8 + 16*n, Target(TARGET_ENTITY, TARGET_PLAYERS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 400, 8, false, true));


        for(int ii = 0; ii < 4; ii++) {
            float i = static_cast<float>(ii);
            mechanicList_.emplace_back(new Cone(72 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * 2 * i), 500 + 300 * std::sin(PI/4 * 2 * i)})));
            mechanicList_.emplace_back(new Cone(72 + 8 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * (2 * i + 1)), 500 + 300 * std::sin(PI/4 * (2 * i + 1))})));
        }
    }

    // Couplet 2

    song_.addCheckpoint(40, 135.9);

    for(int n = 0; n < 6; n++) {
        mechanicList_.emplace_back(new Spread(136 + 8*n, 200, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(136 + 8*n, 200, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(136 + 8*n, 200, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 2, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(136 + 8*n, 200, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 3, TARGET_FOLLOW)));
    }

    for(int n = 0; n < 3; n++) {
        mechanicList_.emplace_back(new Spread(136 + 4 + 16*n, 200, 2, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(136 + 4 + 16*n, 200, 2, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));

        mechanicList_.emplace_back(new Spread(136 + 12 + 16*n, 200, 2, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 2, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(136 + 12 + 16*n, 200, 2, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 3, TARGET_FOLLOW)));
    }

    for(int n = 0; n < 3; n++) {
        for(int ii = 0; ii < 4; ii++) {
            float i = static_cast<float>(ii);
            mechanicList_.emplace_back(new Cone(136 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * 2 * i), 500 + 300 * std::sin(PI/4 * 2 * i)})));
            mechanicList_.emplace_back(new Cone(136 + 8 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * (2 * i + 1)), 500 + 300 * std::sin(PI/4 * (2 * i + 1))})));
        }
    }


    // Refrain

    song_.addCheckpoint(56, 183.9);

    for(int n = 0; n < 3; n++) {
        mechanicList_.emplace_back(new Spread(184 +  8 + 16*n, 400, 0, 8, Target(TARGET_POS, {500, 500})));
        mechanicList_.emplace_back(new Donut(184 + 12 + 16*n, 400, 1500, 0, 8, Target(TARGET_POS, {500, 500})));

        for(int ii = 0; ii < 4; ii++) {
            float i = static_cast<float>(ii);
            mechanicList_.emplace_back(new Cone(184 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * 2 * i), 500 + 300 * std::sin(PI/4 * 2 * i)})));
            mechanicList_.emplace_back(new Cone(184 + 4 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * (2 * i + 1)), 500 + 300 * std::sin(PI/4 * (2 * i + 1))})));
        }
    }

    for(int n = 0; n < 2; n++) {
        for(int ii = 0; ii < 4; ii++) {
            float i = static_cast<float>(ii);
            mechanicList_.emplace_back(new Cone(248 + 8*n, 45, 2000, 0, 4, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * 2 * i), 500 + 300 * std::sin(PI/4 * 2 * i)})));
            if(n == 0)
                mechanicList_.emplace_back(new Cone(248 + 4 + 8*n, 45, 2000, 0, 4, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * (2 * i + 1)), 500 + 300 * std::sin(PI/4 * (2 * i + 1))})));
        }
    }

    //mechanicList_.emplace_back(new Spread(224, 300, 4, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));


    mechanicList_.emplace_back(new Spread(230, 400, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(231, 400, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));

    mechanicList_.emplace_back(new Spread(234, 400, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(235, 400, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 3, TARGET_FOLLOW)));

    mechanicList_.emplace_back(new Spread(238, 400, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(239, 400, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));


    mechanicList_.emplace_back(new Spread(246, 400, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(247, 400, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));

    mechanicList_.emplace_back(new Spread(250, 400, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(251, 400, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 3, TARGET_FOLLOW)));

    mechanicList_.emplace_back(new Spread(254, 400, 2, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(255, 400, 2, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));



    //Intro
    song_.addCheckpoint(81, 256);


    for(int n = 0; n < 6; n++) {
        mechanicList_.emplace_back(new Spread(272 + 8*n, 200, 0, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_ONINIT)));
        mechanicList_.emplace_back(new Spread(272 + 8*n, 200, 0, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_ONINIT)));
        mechanicList_.emplace_back(new Spread(272 + 8*n, 200, 0, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 2, TARGET_ONINIT)));
        mechanicList_.emplace_back(new Spread(272 + 8*n, 200, 0, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 3, TARGET_ONINIT)));
    }

    for(int n = 0; n < 3; n++) {
        for(int ii = 0; ii < 4; ii++) {
            float i = static_cast<float>(ii);
            mechanicList_.emplace_back(new Cone(272 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * 2 * i), 500 + 300 * std::sin(PI/4 * 2 * i)})));
            mechanicList_.emplace_back(new Cone(272 + 8 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * (2 * i + 1)), 500 + 300 * std::sin(PI/4 * (2 * i + 1))})));

        }
    }

    //Couplet 1
    song_.addCheckpoint(102, 319);


    mechanicList_.emplace_back(new Spread(320, 300, 4, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(320 + 16, 300, 4, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(320 + 16*2, 300, 4, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(320 + 16*3, 300, 4, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 3, TARGET_FOLLOW)));


    mechanicList_.emplace_back(new Spread(320 + 8, 300, 2, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(320 + 8 + 16, 300, 2, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(320 + 8 + 16*2, 300, 2, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(320 + 8 + 16*3, 300, 2, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(320 + 8, 300, 2, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(320 + 8 + 16, 300, 2, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 3, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(320 + 8 + 16*2, 300, 2, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(320 + 8 + 16*3, 300, 2, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, 3, TARGET_FOLLOW)));


    for(int n = 0; n < 4; n++) {
        mechanicList_.emplace_back(new Tether(320 + 16*n, Target(TARGET_ENTITY, TARGET_PLAYERS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 100, 8, true, true));
        mechanicList_.emplace_back(new Tether(320 + 16*n, Target(TARGET_ENTITY, TARGET_PLAYERS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 100, 8, true, true));
        mechanicList_.emplace_back(new Spread(320 +  8 + 16*n, 400, 0, 8, Target(TARGET_POS, {500, 500})));

        mechanicList_.emplace_back(new Tether(320+ 8 + 16*n, Target(TARGET_ENTITY, TARGET_PLAYERS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 400, 8, false, true));
        mechanicList_.emplace_back(new Tether(320+ 8 + 16*n, Target(TARGET_ENTITY, TARGET_PLAYERS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 400, 8, false, true));
        mechanicList_.emplace_back(new Donut(320 + 16*n, 400, 1500, 0, 8, Target(TARGET_POS, {500, 500})));

        for(int ii = 0; ii < 4; ii++) {
            float i = static_cast<float>(ii);
            mechanicList_.emplace_back(new Cone(320 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * 2 * i), 500 + 300 * std::sin(PI/4 * 2 * i)})));
            mechanicList_.emplace_back(new Cone(320 + 8 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * (2 * i + 1)), 500 + 300 * std::sin(PI/4 * (2 * i + 1))})));
        }
    }

    mechanicList_.emplace_back(new Spread(382, 400, 2, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(383, 400, 2, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));


    // Solo
    song_.addCheckpoint(124, 384);


    mechanicList_.emplace_back(new MoveEntity(386, Target(TARGET_ENTITY, TARGET_TOTEMS, 0), Target(TARGET_POS,{500, 500}), 1000, true));

    for(int ii = 0; ii < 8; ii++) {
        float i = static_cast<float>(ii);
        if(i == 7)
            mechanicList_.emplace_back(new Cone(392, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * i), 500 + 300 * std::sin(PI/4 * i)})));
        else
            mechanicList_.emplace_back(new Cone(400, 45, 2000, 0, 16, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * i), 500 + 300 * std::sin(PI/4 * i)})));
    }


    mechanicList_.emplace_back(new Spread(416, 300, 2, 8, Target(TARGET_CLOSEST, TARGET_PLAYERS,0, new Target(TARGET_ENTITY, TARGET_TOTEMS, 0), TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(416, 300, 2, 8, Target(TARGET_FURTHEST, TARGET_PLAYERS,0, new Target(TARGET_ENTITY, TARGET_TOTEMS, 0), TARGET_FOLLOW)));

    for(int ii = 0; ii < 8; ii++) {
        float i = static_cast<float>(ii);
        if(i == 1)
            mechanicList_.emplace_back(new Cone(408, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * i), 500 + 300 * std::sin(PI/4 * i)})));
        else
            mechanicList_.emplace_back(new Cone(416, 45, 2000, 0, 16, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * i), 500 + 300 * std::sin(PI/4 * i)})));
    }

    mechanicList_.emplace_back(new Tether(432, Target(TARGET_CLOSEST, TARGET_PLAYERS,0, new Target(TARGET_ENTITY, TARGET_TOTEMS, 0), TARGET_FOLLOW), Target(TARGET_FURTHEST, TARGET_PLAYERS,0, new Target(TARGET_ENTITY, TARGET_TOTEMS, 0), TARGET_FOLLOW), 400, 8, false, true));
    mechanicList_.emplace_back(new Spread(432, 300, 3, 8, Target(TARGET_CLOSEST, TARGET_PLAYERS,0, new Target(TARGET_ENTITY, TARGET_TOTEMS, 0), TARGET_FOLLOW)));


    for(int ii = 0; ii < 8; ii++) {
        float i = static_cast<float>(ii);
        if(i == 0 ||  i == 4)
            mechanicList_.emplace_back(new Cone(424, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * i), 500 + 300 * std::sin(PI/4 * i)})));
        else
            mechanicList_.emplace_back(new Cone(432, 45, 2000, 0, 16, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * i), 500 + 300 * std::sin(PI/4 * i)})));
    }

    mechanicList_.emplace_back(new Spread(448, 300, 2, 8, Target(TARGET_CLOSEST, TARGET_PLAYERS,0, new Target(TARGET_ENTITY, TARGET_TOTEMS, 0), TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(448, 500, 1, 8, Target(TARGET_FURTHEST, TARGET_PLAYERS,0, new Target(TARGET_ENTITY, TARGET_TOTEMS, 0), TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(448, 500, 1, 8, Target(TARGET_FURTHEST, TARGET_PLAYERS,1, new Target(TARGET_ENTITY, TARGET_TOTEMS, 0), TARGET_FOLLOW)));


    for(int ii = 0; ii < 8; ii++) {
        float i = static_cast<float>(ii);
        if(i == 5 || i == 0 || i== 2)
            mechanicList_.emplace_back(new Cone(440, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * i), 500 + 300 * std::sin(PI/4 * i)})));
        else
            mechanicList_.emplace_back(new Cone(448, 45, 2000, 0, 16, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * i), 500 + 300 * std::sin(PI/4 * i)})));
    }

    // Couplet 1

    song_.addCheckpoint(145, 480);

    int dodge[4] = {6, 3, 2, 7};

    for(int n = 0; n < 4; n++) {
        for(int ii = 0; ii < 8; ii++) {
            float i = static_cast<float>(ii);
            if(ii != dodge[n])
                mechanicList_.emplace_back(new Cone(480 + 8*n, 45, 2000, 0, 0, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * i), 500 + 300 * std::sin(PI/4 * i)})));
            else {
                float d = dodge[n]%2 == 0 ? 500:707.1048f;
                mechanicList_.emplace_back(new Cone(480 + 8*n, 45, 2000, 0, 8, Target(TARGET_POS, {500 + d * std::cos(PI/4 * i), 500 + d * std::sin(PI/4 * i)}), Target(TARGET_POS, {500, 500})));
            }
        }
    }


    // Couplet 2

    song_.addCheckpoint(167, 512);

    //int player[4] = {6, 3, 2, 7};

    for(int n = 0; n < 4; n++) {
        mechanicList_.emplace_back(new Spread(512 + 16*n, 300, 3, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, (n+1)%4, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(512 + 16*n, 700, 1, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, n, TARGET_FOLLOW)));

        mechanicList_.emplace_back(new Spread(512 + 4 + 16*n, 200, 0, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, n, TARGET_ONINIT)));
        mechanicList_.emplace_back(new Spread(512 + 8 + 16*n, 200, 0, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, n, TARGET_ONINIT)));

        mechanicList_.emplace_back(new MoveEntity(512+16*n, Target(TARGET_ENTITY, TARGET_TOTEMS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, n), 100, true));
        mechanicList_.emplace_back(new Spread(512 + 8 + 16*n, 200, 0, 4, Target(TARGET_ENTITY, TARGET_TOTEMS, 1, TARGET_FOLLOW)));

        for(int i = 0; i < 4; i++) {
            if(i != n)
                mechanicList_.emplace_back(new Spread(512 + 8 + 16*n, 200, 1, 8, Target(TARGET_ENTITY, TARGET_PLAYERS, i, TARGET_FOLLOW)));
        }
    }

    for(int n = 0; n < 5; n++) {
        for(int ii = 0; ii < 4; ii++) {
            float i = static_cast<float>(ii);
            mechanicList_.emplace_back(new Cone(512 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * 2 * i), 500 + 300 * std::sin(PI/4 * 2 * i)})));
            if(n != 4)
                mechanicList_.emplace_back(new Cone(512 + 8 + 16*n, 45, 2000, 0, 8, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * (2 * i+1)), 500 + 300 * std::sin(PI/4 * (2 * i+1))})));
        }
    }


    // Refrain

    song_.addCheckpoint(190, 592);

    mechanicList_.emplace_back(new Tether(652, Target(TARGET_ENTITY, TARGET_PLAYERS, 0), Target(TARGET_ENTITY, TARGET_PLAYERS, 1), 300, 64, false, true));
    mechanicList_.emplace_back(new Tether(652, Target(TARGET_ENTITY, TARGET_PLAYERS, 1), Target(TARGET_ENTITY, TARGET_PLAYERS, 2), 300, 64, false, true));
    mechanicList_.emplace_back(new Tether(652, Target(TARGET_ENTITY, TARGET_PLAYERS, 2), Target(TARGET_ENTITY, TARGET_PLAYERS, 3), 300, 64, false, true));
    mechanicList_.emplace_back(new Tether(652, Target(TARGET_ENTITY, TARGET_PLAYERS, 3), Target(TARGET_ENTITY, TARGET_PLAYERS, 0), 300, 64, false, true));

    mechanicList_.emplace_back(new Spread(596, 150, 1, 8, Target(TARGET_POS, {200,200})));
    mechanicList_.emplace_back(new Spread(596, 150, 1, 8, Target(TARGET_POS, {800,200})));
    mechanicList_.emplace_back(new Spread(596, 150, 1, 8, Target(TARGET_POS, {200,800})));
    mechanicList_.emplace_back(new Spread(596, 150, 1, 8, Target(TARGET_POS, {800,800})));

    mechanicList_.emplace_back(new Spread(644, 400, 0, 8, Target(TARGET_POS, {500, 500})));
    mechanicList_.emplace_back(new Donut(636, 400, 1500, 0, 8, Target(TARGET_POS, {500, 500})));
    mechanicList_.emplace_back(new Donut(652, 400, 1500, 0, 8, Target(TARGET_POS, {500, 500})));


    for(int n = 0; n < 2; n++) {
        for(int ii = 0; ii < 24; ii++) {
            float i = static_cast<float>(ii);
            float active = n == 0 && i == 0 ? 8:4;
            mechanicList_.emplace_back(new Cone(604 + i + 24*n, 15, 2000, 0, active, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/12 * i), 500 + 300 * std::sin(PI/12 * i)})));
            mechanicList_.emplace_back(new Cone(604 + i + 24*n, 15, 2000, 0, active, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/12 * (i+6)), 500 + 300 * std::sin(PI/12 * (i+6))})));
            mechanicList_.emplace_back(new Cone(604 + i + 24*n, 15, 2000, 0, active, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/12 * (i+12)), 500 + 300 * std::sin(PI/12 * (i+12))})));
            mechanicList_.emplace_back(new Cone(604 + i + 24*n, 15, 2000, 0, active, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/12 * (i+18)), 500 + 300 * std::sin(PI/12 * (i+18))})));
        }
    }

    // MOTTO SPAM

    for(int i = 0; i < 7; i++) {
        mechanicList_.emplace_back(new Spread(658 + 4*i, 300, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 2*(i%2)+0, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(659 + 4*i, 300, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 2*(i%2)+1, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(660 + 4*i, 200, 2, 4, Target(TARGET_POS, {500,500})));
    }

    mechanicList_.emplace_back(new Spread(688, 300, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(688, 300, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(688, 300, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(688, 300, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 3, TARGET_FOLLOW)));

    for(int i = 0; i < 4; i++) {
        mechanicList_.emplace_back(new Spread(692 + 4*i, 300, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 2*(i%2)+0, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(693 + 4*i, 300, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 2*(i%2)+1, TARGET_FOLLOW)));
        mechanicList_.emplace_back(new Spread(694 + 4*i, 200, 2, 4, Target(TARGET_POS, {500,500})));
    }

    for(int n = 0; n < 5; n++) {
        for(int ii = 0; ii < 4; ii++) {
            float i = static_cast<float>(ii);
            mechanicList_.emplace_back(new Cone(692 + 4*n, 45, 2000, 0, 4, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * (2 * i + n%2)), 500 + 300 * std::sin(PI/4 * (2 * i + n%2))})));
        }
    }

    /*mechanicList_.emplace_back(new Spread(692 + 4*4, 300, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 0, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(692 + 4*4, 300, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 1, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(692 + 4*4, 300, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 2, TARGET_FOLLOW)));
    mechanicList_.emplace_back(new Spread(692 + 4*4, 300, 1, 4, Target(TARGET_ENTITY, TARGET_PLAYERS, 3, TARGET_FOLLOW)));

*/
    int dodge1[4] = {1,3};
    int bait[4] = {3, 6};

    for(int n = 0; n < 2; n++) {
        for(int ii = 0; ii < 8; ii++) {
            float i = static_cast<float>(ii);
            if(ii != dodge1[n])
                mechanicList_.emplace_back(new Cone(712 + 4*n, 45, 2000, 0, 4, Target(TARGET_POS, {500, 500}), Target(TARGET_POS, {500 + 300 * std::cos(PI/4 * i), 500 + 300 * std::sin(PI/4 * i)})));
        }
    }

    mechanicList_.emplace_back(new EndMap(718));
